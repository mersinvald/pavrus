WHITESPACE = _{ " " | "\t" | "\r\n" | "\n" | NEWLINE }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }
letter = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
ident = @{ letter ~ (letter | digit | "_")* }
integer = @{ digit+ }
selector = { ("." ~ ident | "[" ~ expression ~ "]") }
number = @{integer}
factor = {ident ~ selector* | number | "(" ~ expression ~ ")" | "~" ~ factor}
term = {factor ~ (("*" | "DIV" | "MOD" | "&") ~ factor)*}
SimpleExpression = { ("+"|"-")? ~ term ~ (("+"|"-" | "OR") ~ term)*}
expression = { SimpleExpression ~ (("<=" | ">=" | "=" | "#" | "<" | ">") ~ SimpleExpression)? }
assignment = { ident ~ selector* ~ ":=" ~ expression }
ActualParameters = { expression ~ ("," ~ expression)* }
ProcedureCall = {ident ~ selector* ~ "(" ~ ActualParameters? ~ ")"?}
IfStatement = {"IF" ~ expression ~ "THEN" ~ StatementSequence ~
    ("ELSIF" ~ expression ~ "THEN" ~ StatementSequence)* ~
    ("ELSE" ~ StatementSequence)? ~ "END"}
WhileStatement = {"WHILE" ~ expression ~ "DO" ~ StatementSequence ~ "END"}
// NOTE: I'm not sure it's correct to have a fully optional token
statement = {(assignment | ProcedureCall | IfStatement | WhileStatement)?}
StatementSequence = {statement ~ (";" ~ statement)*}
IdentList = {ident ~ ("," ~ ident)*}  
ArrayType = {"ARRAY" ~ expression ~ "OF" ~ Type}
FieldList = {(IdentList ~ ":" ~ Type)?}
RecordType = {"RECORD" ~ FieldList ~ (";" ~ FieldList)* ~ "END"}  
Type = {ident | ArrayType | RecordType}
FPSection = {"VAR"? ~ IdentList ~ ":" ~ Type}
FormalParameters = {"(" ~ (FPSection ~ (";" ~ FPSection)*)? ~ ")" }
ProcedureHeading = { "PROCEDURE" ~ ident ~ FormalParameters? }  
ProcedureBody = {declarations ~ ("BEGIN" ~ StatementSequence)? ~ "END" ~ ident}
ProcedureDeclaration = {ProcedureHeading ~ ";" ~ ProcedureBody}
declarations = {("CONST" ~ (ident ~ "=" ~ expression ~ ";")*)? ~
 ("TYPE" ~ (ident ~ "=" ~ Type ~ ";")*)? ~
 ("VAR" ~ (IdentList ~ ":" ~ Type ~ ";")*)?}
module = {
    SOI ~
    "MODULE" ~ ident ~ ";" ~ declarations ~ (ProcedureDeclaration ~ ";")* ~
    ("BEGIN" ~ StatementSequence)? ~ "END" ~ ident ~ "." ~
    EOI
}
